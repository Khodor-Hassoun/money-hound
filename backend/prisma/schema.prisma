generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserType {
  id   Int    @id @default(autoincrement())
  type String @unique
  User User[]

  @@map("user_types")
}

model ProjectPhase {
  id      Int       @id @default(autoincrement())
  type    String    @unique
  Project Project[]
}

model User {
  id        Int        @id @default(autoincrement())
  firstname String
  lastname  String
  email     String     @unique
  password  String
  Usertype  UserType   @relation(fields: [user_type], references: [id])
  user_type Int
  Company   Company[]
  Employee  Employee[]

  @@map("users")
}

model Company {
  id       Int        @id @default(autoincrement())
  name     String
  email    String
  address  String
  phone    String
  owner    User       @relation(fields: [ownerId], references: [id])
  ownerId  Int
  logo     String?
  capital  Int
  Employee Employee[]
  Expense  Expense[]
  Customer Customer[]
  Project  Project[]
  Revenue  Revenue[]

  @@map("companies")
}

model Expense {
  id        Int      @id @default(autoincrement())
  companyId Int
  bill_name String
  price     Int
  date      DateTime @default(now())
  Company   Company  @relation(fields: [companyId], references: [id])

  @@map("expenses")
}

model Employee {
  employeeId   Int       @id @default(autoincrement())
  companyId    Int
  userId       Int
  wage         Int
  job_position String
  start_date   DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id])
  company      Company   @relation(fields: [companyId], references: [id])
  ProjectId    Project[] @relation("ManagerId")
  Project      Project[] @relation("TeamMembers")

  @@map("employees")
}

model Customer {
  customer_email String    @id @unique
  customer_name  String
  first_date     DateTime  @default(now())
  company        Company   @relation(fields: [companyId], references: [id])
  companyId      Int
  Project        Project[]
  Revenue        Revenue[]

  @@map("customers")
}

model Project {
  id               Int          @id @default(autoincrement())
  project_name     String
  manager          Employee     @relation("ManagerId", fields: [managerId], references: [employeeId])
  managerId        Int
  company          Company      @relation(fields: [companyId], references: [id])
  companyId        Int
  customer         Customer     @relation(fields: [customerId], references: [customer_email])
  customerId       String
  budget           Int
  money_spent      Int          @default(0)
  start_date       DateTime     @default(now())
  end_date         DateTime?
  deadline         DateTime?
  project_phase    ProjectPhase @relation(fields: [project_phase_id], references: [id])
  project_phase_id Int
  Activity         Activity[]
  team             Employee[]   @relation("TeamMembers")
  Revenue          Revenue?

  @@map("projects")
}

model Activity {
  id         Int      @id @default(autoincrement())
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  Int
  objective  String
  money      Int
  start_date DateTime @default(now())
  end_date   DateTime

  @@map("activities")
}

model Revenue {
  id             Int      @id
  project        Project  @relation(fields: [projectId], references: [id])
  projectId      Int      @unique
  company        Company  @relation(fields: [companyId], references: [id])
  companyId      Int
  customer       Customer @relation(fields: [customer_email], references: [customer_email])
  customer_email String
  payment_date   DateTime
  payment        Int

  @@map("revenues")
}
